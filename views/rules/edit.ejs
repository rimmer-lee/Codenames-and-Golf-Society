<% layout('layouts/boilerplate') %>
<h1>Edit Rules</h1>
<h6 class="text-muted">Last modified by <%= lastModified.user || 'someone who wants to remain anonymous' %> on <%= lastModified.dateParts.fullDate %></h6>
<form class="mb-3" method="POST" action="/rules">
    <% sections.forEach((section, sIndex) => { %>
    <section class="border border-3 rounded-3 mb-3 p-3">
        <div class="row border border-2 rounded-2 mx-0 mb-3 py-2">
            <label for="s<%= sIndex %>|t" class="col-3 col-md-2 col-xxl-1 col-form-label">Heading</label>
            <div class="col-9 col-md-10 col-xxl-11">
                <textarea id="s<%= sIndex %>|t" class="form-control" name="s<%= sIndex %>[title]" rows="1"><%= section.title %></textarea>
            </div>
        </div>        
        <div class="border border-2 rounded-2 mb-3 py-2">
            <% section.description.forEach((description, dIndex) => { %>
            <div class="row mx-0">
                <div class="col-3 col-md-2 col-xxl-1">
                    <label for="<%= `s${sIndex}|d${dIndex}` %>" class="col-form-label<%= dIndex > 0 ? " d-none" : "" %>" <%= dIndex > 0 ? "visibility=hidden" : "" %>>Description</label>
                </div>
                <div class="col-6 col-md-8 col-xxl-10">
                    <textarea id="<%= `s${sIndex}|d${dIndex}` %>" class="form-control mb-2" name="s<%= sIndex %>[description]" rows="1"><%= description %></textarea>
                </div>
                <div class="col-3 col-md-2 col-xxl-1 ">
                    <div class="d-flex align-items">
                        <div class="btn btn-danger mx-auto" data-action="remove-description">Remove</div>
                    </div>
                </div>
            </div>
            <% }); %>
            <div class="row d-flex align-items mx-0 px-2">
                <div class="btn btn-primary mx-auto<%= section.description.length > 0 ? " col-10" : "col-12"  %>" data-action="add-description">Add Description</div>
            </div>
        </div>
        <!-- needs a function creating to loop through nested sections -->
        <!-- not sure about xxl breakdown - maybe should be 2 -->
        <div class="border border-2 rounded-2 mb-3 py-2">
            <ol class="mb-0 p-0">
                <% section.sections.forEach((breakdown, bIndex) => { %>
                <div class="row mx-0">
                    <div class="col-3 col-md-2 col-xxl-1">
                        <label for="s<%= sIndex %>|s<%= bIndex %>" class="col-form-label<%= bIndex > 0 ? " d-none" : "" %>" <%= bIndex > 0 ? "visibility=hidden" : "" %>>Breakdown</label>
                    </div>
                    <li class="col-6 col-md-8 col-xxl-10 mb-2 pb-2 border-2 border-bottom">
                        <% breakdown.description.forEach((description, dIndex) => { %>
                        <textarea id="s<%= sIndex %>|s<%= bIndex %>" class="form-control mb-2" name="s<%= sIndex %>[sections]" rows="1"><%= description %></textarea>
                        <% }); %>
                        <div class="row mb-2">
                            <div class="btn btn-primary col-10 mx-auto">Add Description</div>
                        </div>
                        <div class="row">
                            <div class="btn btn-primary col-8 mx-auto">New Breakdown</div>
                        </div>
                    </li>
                    <div class="col-3 col-md-2 col-xxl-1 mb-2 pb-2">
                        <div class="d-flex align-items">
                            <div class="btn btn-danger mx-auto" data-action="remove-breakdown">Remove</div>
                        </div>
                    </div>
                </div>
                <% }); %>
                <div class="row d-flex align-items mx-0 px-2">
                    <div class="btn btn-primary mx-auto <%= section.sections.length > 0 ? " col-10" : "col-12"  %>" data-action="add-breakdown">Add Breakdown</div>
                </div>
            </ol>
        </div>
        <div class="row mx-0">
            <div class="btn btn-danger" data-action="remove-section">Remove Section</div>
        </div>
    </section>
    <% }); %>
    <div class="mb-3 border border-3 rounded-3 p-3">
        <div class="row mx-0">
            <div class="btn btn-primary" data-action="add-section" data-element="s">Add Section</div>
        </div>
    </div>
    <div class="mb-3">
        <div class="row px-2">
            <a class="btn btn-warning col-5 container" href="/rules">Cancel</a>
            <input class="btn btn-success col-5 container" type="submit" value="Submit">
        </div>
    </div>
</form>
<script src="/scripts/resize-textareas.js"></script>
<script>
    const addDescriptions = document.querySelectorAll('[data-action="add-description"]');
    const addBreakdowns = document.querySelectorAll('[data-action="add-breakdown"]');
    const addSections = document.querySelectorAll('[data-action="add-section"]');

    const removeDescriptions = document.querySelectorAll('[data-action="remove-description"]');
    const removeBreakdowns = document.querySelectorAll('[data-action="remove-breakdown"]');
    const removeSections = document.querySelectorAll('[data-action="remove-section"]');
    
    for (const addDescription of addDescriptions) addDescription.addEventListener('click', addDescriptionFunction);
    for (const addBreakdown of addBreakdowns) addBreakdown.addEventListener('click', addBreakdownFunction);
    for (const addSection of addSections) addSection.addEventListener('click', addSectionFunction);

    for (const removeDescription of removeDescriptions) removeDescription.addEventListener('click', removeRowFunction);
    for (const removeBreakdown of removeBreakdowns) removeBreakdown.addEventListener('click', removeRowFunction);
    for (const removeSection of removeSections) removeSection.addEventListener('click', removeSectionFunction);

    function updateSectionReference() {
        const sections = document.querySelectorAll('sections');
        sections.forEach((section, index) => {
            
        });
    };

    function createElement(options) {
        const newElement = document.createElement(options.type || 'div');
        options.classList && newElement.classList.add( ...options.classList );
        if (options.attributes) for (const attribute of options.attributes) newElement.setAttribute(attribute.id, attribute.value);
        if (options.innerText) newElement.innerText = options.innerText;
        options.addEventListener && newElement.addEventListener(options.addEventListener.type, options.addEventListener.listener, options.addEventListener.options)
        if (options.children) for (const child of options.children) newElement.appendChild(createElement(child));
        return newElement;
    };

    function removeRowFunction() {
        const rowToBeRemoved = this.closest('div[class*="row"]');
        const borderedRow = rowToBeRemoved.parentElement;
        rowToBeRemoved.remove();
        const remainingChildren = borderedRow.querySelectorAll('div[class*="col-"]:not([class*="btn"])');
        if (remainingChildren.length > 0) {
            const firstChildLabel = remainingChildren[0].querySelector('label');
            firstChildLabel.classList.remove('d-none')
            firstChildLabel.removeAttribute('visibility');
        } else borderedRow.querySelector('.btn').classList.remove('col-10');
    };

    function removeSectionFunction() {
        this.closest('section').remove();
    };

    function focusElement(element) {
        element.focus();
        element.select();
    };

    function addDescriptionFunction() {
        const borderedRow = this.closest('div[class*="border"]');
        const childrenCount = borderedRow.querySelectorAll('div[class*="row"]').length - 1;
        const reference = `${this.dataset.element}|d-${childrenCount + 1}`;
        const addDescriptionParentElement = this.parentElement;

        const label = {
            type: 'label',
            classList: ['col-form-label'],
            attributes: [{ id: 'for', value: reference }],
            innerText: 'Description'
        };

        if (childrenCount) {
            label.classList.push('d-none')
            label.attributes.push({ id: 'visibility', value: 'hidden' });
        };

        const labelParent = {
            classList: ['col-3', 'col-md-2', 'col-xxl-1'],
            children: [label]
        };

        const textArea = {
            type: 'textarea',
            classList: ['form-control', 'mb-2'],
            attributes: [
                { id: 'id', value: reference },
                { id: 'name', value: `${this.dataset.element}[description]` },
                { id: 'rows', value: 1 }
            ],
            addEventListener: {
                type: 'input',
                listener: onInput,
                options: { once: false }
            }
        };

        const textAreaParent = {
            classList: ['col-6', 'col-md-8', 'col-xxl-10'],
            children: [textArea]
        };

        const remove = {
            classList: ['btn', 'btn-danger', 'mx-auto'],
            attributes: [{ id: 'data-action', value: 'remove-description' }],
            innerText: 'Remove',
            addEventListener: {
                type: 'click',
                listener: removeRowFunction
            }
        };

        const removeParent = {
            classList: ['d-flex', 'align-items'],
            children: [remove]
        };

        const removeGrandParent = {
            classList: ['col-3', 'col-md-2', 'col-xxl-1'],
            children: [removeParent]
        };

        const newRow = {
            classList: ['row', 'mx-0'],
            children: [
                labelParent,
                textAreaParent,
                removeGrandParent
            ]
        };

        const newRowElement = createElement(newRow);

        borderedRow.insertBefore(newRowElement, addDescriptionParentElement);

        focusElement(newRowElement.querySelector('textarea'));

        this.classList.remove('col-12');
        this.classList.add('col-10');
    };

    function addBreakdownFunction() {
        const orderedListElement = this.closest('ol');
        const childrenCount = orderedListElement.querySelectorAll('div[class*="row"]').length - 1;
        const reference = `s-50|d-${childrenCount + 1}`;
        const addBreakdownParentElement = this.parentElement;

        const label = {
            type: 'label',
            classList: ['col-form-label'],
            attributes: [{ id: 'for', value: reference }],
            innerText: 'Breakdown'
        };

        if (childrenCount) {
            label.classList.push('d-none')
            label.attributes.push({ id: 'visibility', value: 'hidden' });
        };

        const labelParent = {
            classList: ['col-3', 'col-md-2', 'col-xxl-1'],
            children: [label]
        };

        const textArea = {
            type: 'textarea',
            classList: ['form-control', 'mb-2'],
            attributes: [
                { id: 'id', value: reference },
                { id: 'name', value: `s50[description]` },
                { id: 'rows', value: 1 }
            ],
            addEventListener: {
                type: 'input',
                listener: onInput,
                options: { once: false }
            }
        };

        const addDescription = {
            classList: ['btn', 'btn-primary', 'col-10', 'mx-auto'],
            innerText: 'Add Description'
        };

        const addDescriptionParent = {
            classList: ['row', 'mb-2'],
            children: [addDescription]
        };

        const newBreakdown = {
            classList: ['btn', 'btn-primary', 'col-8', 'mx-auto'],
            innerText: 'New Breakdown'
        };

        const newBreakdownParent = {
            classList: ['row'],
            children: [newBreakdown]
        };

        const listItemElement = {
            type: 'li',
            classList: ['col-6', 'col-md-8', 'col-xxl-10', 'mb-2', 'pb-2', 'border-2', 'border-bottom'],
            children: [textArea, addDescriptionParent, newBreakdownParent]
        };  

        const remove = {
            classList: ['btn', 'btn-danger', 'mx-auto'],
            attributes: [{ id: 'data-action', value: 'remove-breakdown' }],
            innerText: 'Remove',
            addEventListener: {
                type: 'click',
                listener: removeRowFunction
            }
        };

        const removeParent = {
            classList: ['d-flex', 'align-items'],
            children: [remove]
        };

        const removeGrandParent = {
            classList: ['col-3', 'col-md-2', 'col-xxl-1', 'mb-2', 'pb-2'],
            children: [removeParent]
        };

        const newRow = {
            classList: ['row', 'mx-0'],
            children: [
                labelParent,
                listItemElement,
                removeGrandParent
            ]
        };

        const newRowElement = createElement(newRow);

        orderedListElement.insertBefore(newRowElement, addBreakdownParentElement);

        focusElement(newRowElement.querySelector('textarea'));

        this.classList.remove('col-12');
        this.classList.add('col-10');

    };

    function addSectionFunction() {
        const form = this.closest('form');
        const nextIndex = form.querySelectorAll('section').length;
        const sectionReference = `${this.dataset.element}-${nextIndex}`;

        const headingLabelElement = {
            type: 'label',
            classList: ['col-3', 'col-md-2', 'col-xxl-1', 'col-form-label'],
            attributes: [{ id: 'for', value: `${sectionReference}|t` }],
            innerText: 'Heading'
        };

        const headingTextAreaElement = {
            type: 'textarea',
            classList: ['form-control'],
            attributes: [
                { id: 'id', value: `${sectionReference}|t` },
                { id: 'name', value: `${sectionReference}[title]` },
                { id: 'rows', value: 1 }
            ],
            addEventListener: {
                type: 'input',
                listener: onInput,
                options: { once: false }
            }
        };        

        const headingTextAreaParentElement = {
            classList: ['col-9', 'col-md-10', 'col-xxl-11'],
            children: [headingTextAreaElement]
        };

        const headingElement = {
            classList: ['row', 'border', 'border-2', 'rounded-2', 'mx-0', 'mb-3', 'py-2'],
            children: [headingLabelElement, headingTextAreaParentElement]
        };

        const descriptionReference = `${sectionReference}|d-0`;

        const descriptionLabelElement = {
            classList: ['col-form-label'],
            attributes: [{ id: 'for', value: descriptionReference }],
            innerText: 'Description'
        };

        const descriptionLabelParentElement = {
            classList: ['col-3', 'col-md-2', 'col-xxl-1'],
            children: [descriptionLabelElement]
        };

        const descriptionTextAreaElement = {
            type: 'textarea',
            classList: ['form-control', 'mb-2'],
            attributes: [
                { id: 'id', value: descriptionReference },
                { id: 'name', value: descriptionReference },
                { id: 'rows', value: 1 }
            ],
            addEventListener: {
                type: 'input',
                listener: onInput,
                options: { once: false }
            }
        };

        const descriptionTextAreaParentElement = {
            classList: ['col-6', 'col-md-8', 'col-xxl-10'],
            children: [descriptionTextAreaElement]
        };

        const removeDescriptionElement = {
            classList: ['btn', 'btn-danger', 'mx-auto'],
            attributes: [{ id: 'data-action', value: 'remove-description' }],
            innerText: 'Remove',
            addEventListener: {
                type: 'click',
                listener: removeRowFunction
            }
        };

        const removeDescriptionParentElement = {
            classList: ['d-flex', 'align-items'],
            children: [removeDescriptionElement]
        };

        const removeDescriptionGrandParentElement = {
            classList: ['col-3', 'col-md-2', 'col-xxl-1'],
            children: [removeDescriptionParentElement]
        };

        const addDescriptionElement = {
            classList: ['btn', 'btn-primary', 'col-10', 'mx-auto'],
            attributes: [{ id: 'data-action', value: 'add-description' }],
            innerText: 'Add Description',
            addEventListener: {
                type: 'click',
                listener: addDescriptionFunction
            }
        };
        
        const addDescriptionRowElement = {
            classList: ['row', 'd-flex', 'align-items', 'mx-0', 'px-2'],
            children: [addDescriptionElement]
        };

        const descriptionRowElement = {
            classList: ['row', 'mx-0'],
            children: [
                descriptionLabelParentElement,
                descriptionTextAreaParentElement,
                removeDescriptionGrandParentElement,
                ]
        };

        const descriptionBorderElement = {
            classList: ['border', 'border-2', 'rounded-2', 'mb-3', 'py-2'],
            children: [descriptionRowElement, addDescriptionRowElement]
        };

        const sectionElementOptions = {
            type: 'section',
            classList: ['border', 'border-3', 'rounded-3', 'mb-3', 'p-3'],
            children: [headingElement, descriptionBorderElement]
        };

        const sectionElement = createElement(sectionElementOptions);

        form.insertBefore(sectionElement, this.closest('form > div'));

        const breakdownRowElement = document.createElement('div');
        breakdownRowElement.classList.add('row', 'border', 'border-2', 'rounded-2', 'mx-0', 'mb-3', 'py-2');

        const breakdownLabelElementOptions = {
            type: 'label',
            classList: ['col-form-label'],
            attributes: [{ id: 'for', value: `${sectionReference}|s0` }],
            innerText: 'Breakdown'
        };

        const breakdownLabelParentElementOptions = {
            classList: ['col-3', 'col-md-2', 'col-xxl-1'],
            children: [breakdownLabelElementOptions]
        };

        const breakdownLabelParentElement = createElement(breakdownLabelParentElementOptions);

        const breakdownOrderedListElementOptions = {
            type: 'ol',
            classList: ['px-0', 'mb-0']
        };
        const breakdownOrderedListElement = createElement(breakdownOrderedListElementOptions);

        const breakdownListItemRowElementOptions = { classList: ['row', 'mx-0'] };
        const breakdownListItemRowElement = createElement(breakdownListItemRowElementOptions);

        const breakdownListItemElementOptions = { type: 'li', classList: ['col-6', 'col-md-8', 'col-xxl-10'] };
        const breakdownListItemElement = createElement(breakdownListItemElementOptions);

        const breakdownTextAreaElementOptions = {
            type: 'textarea',
            classList: ['form-control', 'mb-2'],
            attributes: [
                { id: 'id', value: `${sectionReference}|s0` },
                { id: 'name', value: `${sectionReference}[sections]` },
                { id: 'rows', value: 1 }
            ],
            addEventListener: {
                type: 'input',
                listener: onInput,
                options: { once: false }
            }
        };

        const breakdownTextAreaElement = createElement(breakdownTextAreaElementOptions);

        const breakdownAddDescriptionRowElementOptions = { classList: ['row', 'mb-2'] };
        const breakdownAddDescriptionRowElement = createElement(breakdownAddDescriptionRowElementOptions)

        const breakdownAddDescriptionElementOptions = {
            classList: ['btn', 'btn-primary', 'mx-auto'],
            innerText: 'Add Description',
            // addEventListener: {
                // type: 'click',
                // listener: 
            // }
        };
        const breakdownAddDescriptionElement = createElement(breakdownAddDescriptionElementOptions);

        const breakdownAddBreakdownRowElementOptions = { classList: ['row'] };
        const breakdownAddBreakdownRowElement = createElement(breakdownAddBreakdownRowElementOptions);

        const breakdownAddBreakdownElementOptions = {
            classList: ['btn', 'btn-primary', 'col-10', 'mx-auto'],
            innerText: 'Add Breakdown',
            // addEventListener: {
                // type: 'click',
                // listener: 
            // }
        };
        const breakdownAddBreakdownElement = createElement(breakdownAddBreakdownElementOptions);

        const removeBreakdownGrandParentElementOptions = { classList: ['col-3', 'col-md-2', 'col-xxl-1'] };
        const removeBreakdownGrandParentElement = createElement(removeBreakdownGrandParentElementOptions);

        const removeBreakdownParentElementOptions = { classList: ['d-flex', 'align-items']};
        const removeBreakdownParentElement = createElement(removeBreakdownParentElementOptions);

        const removeBreakdownElementOptions = {
            classList: ['btn', 'btn-danger', 'mx-auto'],
            innerText: 'Remove',
            // addEventListener: {
                // type: 'click',
                // listener: 
            // }
        };
        const removeBreakdownElement = createElement(removeBreakdownElementOptions);

        breakdownAddDescriptionRowElement.appendChild(breakdownAddDescriptionElement);

        breakdownAddBreakdownRowElement.appendChild(breakdownAddBreakdownElement);

        breakdownListItemElement.appendChild(breakdownTextAreaElement);
        breakdownListItemElement.appendChild(breakdownAddDescriptionRowElement);
        breakdownListItemElement.appendChild(breakdownAddBreakdownRowElement);

        removeBreakdownParentElement.appendChild(removeBreakdownElement);
        removeBreakdownGrandParentElement.appendChild(removeBreakdownParentElement);

        breakdownListItemRowElement.appendChild(breakdownLabelParentElement);
        breakdownListItemRowElement.appendChild(breakdownListItemElement);
        breakdownListItemRowElement.appendChild(removeBreakdownGrandParentElement);

        breakdownOrderedListElement.appendChild(breakdownListItemRowElement);

        breakdownRowElement.appendChild(breakdownOrderedListElement);

        sectionElement.appendChild(breakdownRowElement);

        
        const removeSectionElementOption = {
            classList: ['btn', 'btn-danger'],
            attributes: [{ id: 'data-action', value: 'remove-section' }],
            innerText: 'Remove Section',
            addEventListener: {
                type: 'click',
                listener: removeSectionFunction
            }
        };
        
        const removeSectionParentElementOptions = {
            classList: ['row', 'mx-0'],
            children: [removeSectionElementOption]
        };

        const removeSectionParentElement = createElement(removeSectionParentElementOptions)
    
        sectionElement.appendChild(removeSectionParentElement);

        sectionElement.querySelector('textarea').focus();
        sectionElement.querySelector('textarea').select();
    };
</script>