<!-- Sortable Drag and Drop Functionality -->
<!-- https://www.youtube.com/watch?v=jfYWwQrtzzY -->

<% layout('layouts/boilerplate') %>
<% const incomplete = true %>
<% const test = true %>
<div class="row my-3 pb-2 border-bottom border-1">
    <h1>Edit Rules</h1>
    <% if (incomplete) { %>
    <h6 class="text-muted">Last modified on <%= lastModified.dateParts.fullDate %></h6>
    <% } else { %>
    <h6 class="text-muted">Last modified by <%= lastModified.user || 'someone who wants to remain anonymous' %> on <%= lastModified.dateParts.fullDate %></h6>
    <% }; %>
</div>
<form class="mb-3" method="POST" action="/rules">
    <% sections.forEach((section, sIndex) => { %>
    <% const sectionReference = `s${sIndex}|t`; %>
    <section class="border border-3 rounded-3 mb-3 p-3">
        <div class="row border border-2 rounded-2 mx-0 mb-3 py-2">
            <label for="<%= sectionReference %>" class="col-3 col-md-2 col-xxl-1 col-form-label">Heading</label>
            <div class="col-9 col-md-10 col-xxl-11 ps-0">
                <textarea id="<%= sectionReference %>" class="form-control" name="<%= sectionReference %>" rows="1"><%= section.title %></textarea>
            </div>
        </div>
        <div class="border border-2 rounded-2 mb-3 py-2">
            <% if (section.description.length > 0) { %>
            <% section.description.forEach((description, dIndex) => { %>
            <% const descriptionReference = `s${sIndex}|d${dIndex}`; %>
            <div class="row mx-0<%= dIndex > 0 ? " mt-2" : "" %>">
                <div class="col-3 col-md-2 col-xxl-1">
                    <label for="<%= descriptionReference %>" class="col-form-label<%= dIndex > 0 ? " d-none" : "" %>" <%= dIndex > 0 ? "visibility=hidden" : "" %>>Description</label>
                </div>
                <div class="col d-flex justify-content-end px-0">
                    <textarea id="<%= descriptionReference %>" class="form-control" name="<%= descriptionReference %>"><%= description %></textarea>
                    <div class="col d-flex flex-column justify-content-between px-2">
                        <div class="mb-2">
                            <div class="col btn btn-danger p-1" data-action="remove-row" data-bs-toggle="tooltip" data-bs-placement="left" title="Remove Description">
                                <div class="btn-close btn-close-white" aria-label="remove"></div>
                            </div>
                        </div>
                        <div>
                            <div class="col btn btn-success p-1" data-action="add-description" data-bs-toggle="tooltip" data-bs-placement="left" title="Add Description">
                                <div class="plus" aria-label="add"></div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <% }); %>
            <% } else { %>
            <div class="row mx-2">
                <div class="btn btn-success mx-auto" data-action="add-description">New Description</div>
            </div>
            <% }; %>
        </div>
        <ol class="border border-2 rounded-2 mb-3 ps-0 py-2">
            <% if (section.rules.length > 0) { %>
            <% section.rules.forEach((rule, bIndex) => { %>
            <% const ruleReference = `s${sIndex}|s${bIndex}`; %>
            <div class="row mx-0">
                <% if (bIndex > 0) { %>
                <div class="row mx-0 my-2 px-0">
                    <div class="offset-1 col-10 border-2 border-top"></div>
                </div>
                <% }; %>
                <div class="row mb-2 mx-0 px-0">
                    <div class="col-3 col-md-2">
                        <label for="<%= ruleReference %>|d" class="col-form-label<%= bIndex > 0 ? " d-none" : "" %>" <%= bIndex > 0 ? "visibility=hidden" : "" %>>Rules</label>
                    </div>                    
                    <li class="col px-0">                        
                        <div class="d-flex justify-content-end px-0">
                            <textarea id="<%= ruleReference %>|d" class="form-control" name="<%= ruleReference %>|d"><%= rule.description %></textarea>
                            <div class="col d-flex flex-column justify-content-between px-2">
                                <div class="mb-2">
                                    <div class="col btn btn-danger p-1" data-action="remove-row" data-bs-toggle="tooltip" data-bs-placement="left" title="Remove rule">
                                        <div class="btn-close btn-close-white" aria-label="close"></div>
                                    </div>
                                </div>
                                <div>
                                    <div class="col btn btn-success p-1" data-action="add-description" data-bs-toggle="tooltip" data-bs-placement="left" title="Add Description">
                                        <div class="plus" aria-label="add"></div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <% if (rule.sections) { %>
                        <%- include('../partials/forms/charter/edit/breakdown.ejs', { sections: rule.sections, sectionReference: ruleReference }) %>
                        <% }; %>
                    </li>
                </div>
                <div class="row mx-0 px-0">
                    <div class="d-flex justify-content-end pe-4">
                        <i class="bi bi-arrow-return-right btn btn-success px-4 py-0" aria-label="rule" data-action="rule" data-bs-toggle="tooltip" data-bs-placement="left" title="rule"></i>
                    </div>
                </div>
            </div>
            <% }); %>
            <% } else { %>
            <div class="row mx-2">
                <div class="btn btn-success mx-auto" data-action="new-rule">New Breakdown</div>
            </div>
            <% }; %>
        </ol>
        <!-- https://getbootstrap.com/docs/5.0/components/collapse/ -->
        <div class="row mx-0">
            <div class="btn btn-danger" data-action="remove-section">Remove Section</div>
        </div>
    </section>
    <% }); %>
    <div class="mb-3 border border-3 rounded-3 p-3">
        <div class="row mx-0">
            <div class="btn btn-success" data-action="add-section" data-element="s">New Section</div>
        </div>
    </div>
    <div class="mb-3">
        <div class="row px-2">
            <a class="btn btn-warning col-5 container" href="/rules">Cancel</a>
            <input class="btn btn-primary col-5 container" type="submit" value="Submit">
        </div>
    </div>
</form>

<!-- makes scripts modular and import them into a single script -->
<script src="/scripts/resize-textareas.js"></script>
<script src="/scripts/form-references.js"></script>
<script>

    // needs to be added to new elements
    // https://getbootstrap.com/docs/5.0/components/tooltips/
    const tooltipElements = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'))
    const tooltipList = tooltipElements.map(tooltipElement => new bootstrap.Tooltip(tooltipElement));


    const addDescriptions = document.querySelectorAll('[data-action="add-description"]');
    const addBreakdowns = document.querySelectorAll('[data-action="add-breakdown"]');
    const addSections = document.querySelectorAll('[data-action="add-section"]');

    const newBreakdowns = document.querySelectorAll('[data-action="new-breakdown"]');
    const breakdowns = document.querySelectorAll('[data-action="breakdown"]');

    const removeButton = {
        classList: ['mb-2'],
        children: [{
            classList: ['btn', 'btn-danger', 'p-1'],
            attributes: [
                { id: 'data-action', value: 'remove-row' },
                { id: 'data-bs-toggle', value: 'tooltip' },
                { id: 'data-bs-placement', value: 'left' },
                { id: 'title', value: 'Remove Description' }
            ],
            addEventListener: { type: 'click', listener: removeRowFunction },
            children: [{
                classList: ['btn-close', 'btn-close-white'],
                attributes: [{ id: 'aria-label', value: 'remove' }],
            }]
        }]
    };

    function newBreakdownFunction() {
        
        // <div class="row mx-0">
            // <div class="row mb-2 mx-0 px-0">
                // <div class="col-3 col-md-2">
                    // <label for="" class="col-form-label>Breakdown</label>
                // </div>                    
                // <li class="col px-0">                        
                    // <div class="d-flex justify-content-end px-0">
                        // <textarea id="" class="form-control" name=""></textarea>
                        // <div class="col d-flex flex-column justify-content-between px-2">
                            // <div class="mb-2">
                                // <div class="col btn btn-danger p-1" data-action="remove-row" data-bs-toggle="tooltip" data-bs-placement="left" title="Remove Breakdown">
                                    // <div class="btn-close btn-close-white" aria-label="close"></div>
                                // </div>
                            // </div>
                            // <div>
                                // <div class="col btn btn-success p-1" data-action="add-breakdown" data-bs-toggle="tooltip" data-bs-placement="left" title="Add Breakdown">
                                    // <div class="btn-close btn-close-white" aria-label="add"></div>
                                // </div>
                            // </div>
                        // </div>
                    // </div>
                // </li>
            // </div>
            // <div class="row mx-0 px-0">
                // <div class="d-flex justify-content-end pe-4">
                    // <div class="btn btn-success" data-action="breakdown">Breakdown</div>
                // </div>
            // </div>
        // </div>

    };

    const removeRows = document.querySelectorAll('[data-action="remove-row"]');
    
    const removeSections = document.querySelectorAll('[data-action="remove-section"]');
    
    for (const addDescription of addDescriptions) addDescription.addEventListener('click', addDescriptionFunction);
    for (const addBreakdown of addBreakdowns) addBreakdown.addEventListener('click', addBreakdownFunction);
    for (const addSection of addSections) addSection.addEventListener('click', addSectionFunction);

    for (const newBreakdown of newBreakdowns) newBreakdown.addEventListener('click', newBreakdownFunction);

    for (const removeRow of removeRows) removeRow.addEventListener('click', removeRowFunction);
    for (const removeSection of removeSections) removeSection.addEventListener('click', removeSectionFunction);


    function createElement(options) {
        const newElement = document.createElement(options.type || 'div');
        options.classList && newElement.classList.add( ...options.classList );
        if (options.attributes) for (const attribute of options.attributes) newElement.setAttribute(attribute.id, attribute.value);
        if (options.innerText) newElement.innerText = options.innerText;
        options.addEventListener && newElement.addEventListener(options.addEventListener.type || 'click', options.addEventListener.listener, options.addEventListener.options)
        if (options.children) for (const child of options.children) newElement.appendChild(createElement(child));
        return newElement;
    };

    function removeRowFunction() {
        const rowToBeRemoved = this.closest('[class*="border"] > [class*="row"]')
        const borderedRow = rowToBeRemoved.parentElement;
        rowToBeRemoved.remove();
        const remainingChildren = borderedRow.querySelectorAll('div[class*="col-"]:not([class*="btn"])');
        if (remainingChildren.length > 0) {
            const firstChildLabel = remainingChildren[0].querySelector('label');
            firstChildLabel.classList.remove('d-none')
            firstChildLabel.removeAttribute('visibility');
        } else borderedRow.querySelector('.btn').classList.remove('col-10');
    };

    function removeSectionFunction() {
        this.closest('section').remove();
    };

    function focusElement(element) {
        element.focus();
        element.select();
    };

    function addDescriptionFunction() {
        const parentElement = this.closest('div[class*="border"]');
        const nextElement = this.closest('div[class*="row"]').nextElementSibling;
        const newElement = createElement({
            classList: ['row', 'mx-0', 'mt-2'],
            children: [
                {
                    classList: ['col-3', 'col-md-2', 'col-xxl-1'],
                    children: [{
                        type: 'label',
                        classList: ['col-form-label', 'd-none'],
                        setAttributes: [
                            { id: 'for', value: '' },
                            { id: 'visibility', value: 'hidden' }
                        ],
                        innerText: 'Description'
                    }]
                },
                {
                    classList: ['col', 'd-flex', 'justify-content-end', 'px-0'],
                    children: [
                        {
                            type: 'textarea',
                            classList: ['form-control'],
                            setAttributes: [{ id: 'name', value: '' }]
                        },
                        {
                            classList: ['col', 'd-flex', 'flex-column', 'justify-content-between', 'px-2'],
                            children: [
                                removeButton,
                                {
                                    children: [{
                                        classList: ['col', 'btn', 'btn-success', 'p-1'],
                                        setAttributes: [{ id: 'data-action', value: '' }],
                                        children: [{
                                            classList: ['btn-close', 'btn-close-white'],
                                            setAttributes: [{ id: 'aria-label', value: 'add' }],
                                            addEventListener: { listener: addDescriptionFunction }
                                        }]
                                    }]
                                }
                            ]
                        }
                    ]
                }
            ]
        });
        parentElement.insertBefore(newElement, nextElement);
        focusElement(newElement.querySelector('textarea'));
    };

    function addBreakdownFunction() {
        const parentElement = this.closest('ol');
        const nextElement = this.closest('ol > .row').nextElementSibling;
        const newElement = createElement({
            classList: ['row', 'mx-0'],
            children: [
                // only for non-top element
                {
                    classList: ['row', 'mx-0', 'my-2', 'px-0'],
                    children: [{ classList: ['offset-1', 'col-10', 'border-2', 'border-bottom'] }]
                },
                {
                    classList: ['row', 'mb-2', 'mx-0', 'px-0'],
                    children: [
                        {
                            classList: ['col-3', 'col-md-2'],
                            children: [{
                                type: 'label',
                                class: ['col-form-label', 'd-none'],
                                attributes: [
                                    { id: 'for', value: '' },
                                    { id: 'visibility', value: 'hidden' }
                                ]
                            }]
                        },
                        {
                            type: 'li',
                            classList: ['col', 'px-0'],
                            children: [{
                                classList: ['col', 'd-flex', 'justify-content-end', 'px-0'],
                                children: [
                                    {
                                        type: 'textarea',
                                        classList: ['form-control'],
                                        attributes: [
                                            { id: 'id', value: '' },
                                            { id: 'name', value: '' }
                                        ]
                                    },
                                    {
                                        classList: ['col', 'd-flex', 'flex-column', 'justify-content-between', 'px-2'],
                                        children: [
                                            removeButton,
                                            {
                                                children: [{
                                                    classList: ['col', 'btn', 'btn-success', 'p-1'],
                                                    attributes: [
                                                        { id: 'data-action', value: 'add-breakdown' },
                                                        { id: 'data-bs-toggle', value: 'tooltip' },
                                                        { id: 'data-bs-placement', value: 'left' },
                                                        { id: 'title', value: 'Add Breakdown' }
                                                    ],
                                                    addEventListener: { listener: addBreakdownFunction },
                                                    children: [{
                                                        classList: ['btn-close', 'btn-close-white'],
                                                        attributes: [{ id: 'aria-label', value: 'add' }]
                                                    }]
                                                }]
                                            }
                                        ]
                                    }
                                ]
                            }]
                        }
                    ]
                },
                {
                    classList: ['row', 'mx-0', 'px-0'],
                    children: [{
                        classList: ['d-flex', 'justify-content-end', 'pe-4'],
                        children: [{
                            classList: ['btn', 'btn-success'],
                            attributes: [{ id: 'data-action', value: 'add-breakdown' }],
                            innerText: 'New Breakdown'
                        }]
                    }]
                }
            ]
        });

        parentElement.insertBefore(newElement, nextElement);
        focusElement(newElement.querySelector('textarea'));

    };

    function addSectionFunction() {
        const form = this.closest('form');
        const nextIndex = form.querySelectorAll('section').length;
        const sectionReference = `${this.dataset.element}-${nextIndex}`;

        const headingLabel = {
            type: 'label',
            classList: ['col-3', 'col-md-2', 'col-xxl-1', 'col-form-label'],
            attributes: [{ id: 'for', value: `${sectionReference}|t` }],
            innerText: 'Heading'
        };

        const headingTextArea = {
            type: 'textarea',
            classList: ['form-control'],
            attributes: [
                { id: 'id', value: `${sectionReference}|t` },
                { id: 'name', value: `${sectionReference}[title]` },
                { id: 'rows', value: 1 }
            ],
            addEventListener: {
                type: 'input',
                listener: onInput,
                options: { once: false }
            }
        };        

        const headingTextAreaParent = {
            classList: ['col-9', 'col-md-10', 'col-xxl-11'],
            children: [headingTextArea]
        };

        const heading = {
            classList: ['row', 'border', 'border-2', 'rounded-2', 'mx-0', 'mb-3', 'py-2'],
            children: [headingLabel, headingTextAreaParent]
        };

        const descriptionReference = `${sectionReference}|d-0`;

        const descriptionLabel = {
            classList: ['col-form-label'],
            attributes: [{ id: 'for', value: descriptionReference }],
            innerText: 'Description'
        };

        const descriptionLabelParent = {
            classList: ['col-3', 'col-md-2', 'col-xxl-1'],
            children: [descriptionLabel]
        };

        const descriptionTextArea = {
            type: 'textarea',
            classList: ['form-control', 'mb-2'],
            attributes: [
                { id: 'id', value: descriptionReference },
                { id: 'name', value: descriptionReference }
            ],
            addEventListener: {
                type: 'input',
                listener: onInput,
                options: { once: false }
            }
        };

        const descriptionTextAreaParent = {
            classList: ['col-6', 'col-md-8', 'col-xxl-10'],
            children: [descriptionTextArea]
        };

        const removeDescriptionGrandParent = {
            classList: ['col-3', 'col-md-2', 'col-xxl-1'],
            children: [removeButton()]
        };

        const addDescription = {
            classList: ['btn', 'btn-success', 'col-10', 'mx-auto'],
            attributes: [{ id: 'data-action', value: 'add-description' }],
            innerText: 'Add Description',
            addEventListener: {
                type: 'click',
                listener: addDescriptionFunction
            }
        };
        
        const addDescriptionRow = {
            classList: ['row', 'd-flex', 'align-items', 'mx-0', 'px-2'],
            children: [addDescription]
        };

        const descriptionRow = {
            classList: ['row', 'mx-0'],
            children: [descriptionLabelParent, descriptionTextAreaParent, removeDescriptionGrandParent]
        };

        const description = {
            classList: ['border', 'border-2', 'rounded-2', 'mb-3', 'py-2'],
            children: [descriptionRow, addDescriptionRow]
        };

        const breakdownLabel = {
            type: 'label',
            classList: ['col-form-label'],
            attributes: [{ id: 'for', value: 'some-reference' }],
            innerText: 'Breakdown'
        };

        const breakdownLabelParent = {
            classList: ['col-3', 'col-md-2'],
            children: [breakdownLabel]
        }

        const breakdownTextArea = {
            type: 'textarea',
            classList: ['form-control', 'mb-2'],
            attributes: [
                { id: 'id', value: ''},
                { id: 'name', value: ''}
            ]
        };

        const newBreakdown = {
            classList: ['btn', 'btn-success', 'col-10', 'mx-auto'],
            attributes: [{ id: 'data-action', value: 'new-breakdown' }],
            innerText: 'New Breakdown',
            // addEventListener: {
                // type: 'click',
                // listener: newBreakdownFunction
            // }
        };
        
        const newBreakdownParent = { classList: ['row'], children: [newBreakdown] };

        const breakdownContentParent = {
            type: 'li',
            classList: ['col-6', 'col-md-8', 'mb-2', 'pb-2', 'border-2', 'border-bottom'],
            // children: [breakdownTextArea, newBreakdownParent]
            children: [breakdownTextArea]
        };        

        const removeBreakdown = {
            classList: ['btn', 'btn-danger', 'mx-auto'],
            attributes: [{ id: 'data-action', value: 'remove-breakdown' }],
            innerText: 'Remove',
            addEventListener: {
                type: 'click',
                listener: removeRowFunction
            }
        };

        const removeBreakdownParent = {
            classList: ['d-flex', 'align-items'],
            children: [removeBreakdown]
        };

        const removeBreakdownGrandParent = {
            classList: ['col-3', 'col-md-2', 'mb-2', 'pb-2'],
            children: [removeBreakdownParent]
        };

        const breakdownRow = {
            classList: ['row', 'mx-0'],
            children: [breakdownLabelParent, breakdownContentParent, removeBreakdownGrandParent]
        };       

        const addBreakdown = {
            classList: ['btn', 'btn-success', 'mx-auto', 'col-10'],
            attributes: [{ id: 'data-action', value: 'add-breakdown' }],
            innerText: 'Add Breakdown',
            addEventListener: {
                type: 'click',
                listener: addBreakdownFunction
            }
        };

        const addBreakdownRow = {
            classList: ['row', 'd-flex', 'align-items', 'mx-0', 'px-2'],
            children: [addBreakdown]
        };

        const breakdownList = {
            type: 'ol',
            classList: ['mb-0', 'p-0'],
            children: [breakdownRow, addBreakdownRow]
        };

        const breakdown = {
            classList: ['border', 'border-2', 'rounded-2', 'mb-3', 'py-2'],
            children: [breakdownList]
        };

        const sectionElementOptions = {
            type: 'section',
            classList: ['border', 'border-3', 'rounded-3', 'mb-3', 'p-3'],
            children: [heading, description, breakdown]
        };

        const sectionElement = createElement(sectionElementOptions);

        form.insertBefore(sectionElement, this.closest('form > div'));

        const removeSectionElementOption = {
            classList: ['btn', 'btn-danger'],
            attributes: [{ id: 'data-action', value: 'remove-section' }],
            innerText: 'Remove Section',
            addEventListener: {
                type: 'click',
                listener: removeSectionFunction
            }
        };
        
        const removeSectionParentElementOptions = {
            classList: ['row', 'mx-0'],
            children: [removeSectionElementOption]
        };

        const removeSectionParentElement = createElement(removeSectionParentElementOptions)
    
        sectionElement.appendChild(removeSectionParentElement);

        sectionElement.querySelector('textarea').focus();
        sectionElement.querySelector('textarea').select();
    };
</script>